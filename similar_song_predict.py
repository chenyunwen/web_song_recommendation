# -*- coding: utf-8 -*-
"""similar_song_predict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CcovQdaMlwaEXyYv8fz4G50BtZspG-73
"""

# import matplotlib.pyplot as plt
# import numpy as np
import jieba.analyse
import jieba
# import codecs
import pandas as pd
import re
import os
from gensim import corpora, models, similarities

"""# Load lyric data base"""

df = pd.read_csv ('./similar_lyric/data/lyric_df.csv')
df

"""# Import testing lyric and preprocess"""

def remove_punctuation(line):
    stopwords = [line.strip() for line in open('./similar_lyric/data/stopwords.txt', 'r', encoding='utf-8').readlines()]
    line = str(line)
    if line.strip() == '':
        return ''
    re_han = re.compile(u"[^a-zA-Z0-9\u4E00-\u9FA5]")
    line = re_han.sub('', line)
    cut = [w for w in list(jieba.cut(line)) if w not in stopwords]
    res = ", ".join(cut)
    return res

# 載入同義字
word_net = []
with open("similar_lyric/data/synonyms.txt", "r", encoding = "utf-8") as f1:
    for line in f1:
        word_net.append(line)

word_net = sorted(set(word_net))
synonyms_dic = {}

for word in word_net:
    word_s = word.split()
    synonyms_dic[word_s[0]] = word_s[1]

def synonyms(line):
    line_words = line.split(", ")
    line_lyrics = ""
    for line_word in line_words:
        if line_word in synonyms_dic:
            line_lyrics = line_lyrics + synonyms_dic[line_word] + ' '
        else:
            line_lyrics = line_lyrics + line_word + ' '
    return line_lyrics

def getTopTen(line):
    words = jieba.analyse.extract_tags(line, 10)
    return words


def all_predict(lyrics):
    test_lyric = lyrics
    test_lyric_seg = remove_punctuation(test_lyric)
    doc = synonyms(test_lyric_seg)
    doc_top10 = getTopTen(doc)
# 載入語料庫
    if (os.path.exists("similar_lyric/data/lyrics.dict")):
        dictionary = corpora.Dictionary.load("similar_lyric/data/lyrics.dict") # 建立Dictionary
        print(dictionary)
        corpus = corpora.MmCorpus("similar_lyric/data/lyrics.mm") # 將數據流的語料變為內容流的語料
        print("Used files generated from first tutorial")
        print(corpus)
    else:
        print("Please run first tutorial to generate data set")

    tfidf = models.TfidfModel(corpus)
    # 轉為向量表示
    corpus_tfidf = tfidf[corpus] 

    """## LDA"""

    lda_model = models.LsiModel.load('similar_lyric/model/lda_model.lda')
    vec_bow = dictionary.doc2bow(doc.split()) # 把doc語料庫轉為一個一個詞包
    vec_lsi = lda_model[vec_bow] # 用前面建好的 lsi 模型去計算這一篇歌詞 (input: 斷詞後的詞包、output: 20個主題成分)

    index = similarities.MatrixSimilarity(lda_model[corpus])  # 建立索引
    sims = index[vec_lsi] 
    sims = sorted(enumerate(sims), key = lambda item: -item[1])

    names, lyrics, top10 = [], [], []
    for n, line, ten in zip(list(df['Name']), list(df['Lyric']), list(df['top_10'])):
        names.append(n)
        lyrics.append(line)
        top10.append(ten)

    song_names = []
    song_lyrics = []
    acc = []
    for lyric in sims[:5]:
        print("\n相似歌詞: ",  names[lyric[0]])
        song_names.append(names[lyric[0]])
        print("TF-IDF top 10: ", top10[lyric[0]])
        print(lyrics[lyric[0]])
        song_lyrics.append(lyrics[lyric[0]])
        print("相似度：",  lyric[1])
        acc.append(lyric[1])  
    return song_names, song_lyrics, acc
    # lsi_model = models.LsiModel.load('model/lsi_model.lsi')
    # vec_bow = dictionary.doc2bow(doc.split()) # 把doc語料庫轉為一個一個詞包
    # vec_lsi = lsi_model[vec_bow] # 用前面建好的 lsi 模型去計算這一篇歌詞 (input: 斷詞後的詞包、output: 20個主題成分)

    # index = similarities.MatrixSimilarity(lsi_model[corpus])  # 建立索引
    # sims = index[vec_lsi] 
    # sims = sorted(enumerate(sims), key = lambda item: -item[1])

    # names, lyrics, top10 = [], [], []
    # for n, line, ten in zip(list(df['Name']), list(df['Lyric']), list(df['top_10'])):
    #     names.append(n)
    #     lyrics.append(line)
    #     top10.append(ten)

    # for lyric in sims[:5]:
    #     print("\n相似歌詞: ",  names[lyric[0]])
    #     print("TF-IDF top 10: ", top10[lyric[0]])
    #     print(lyrics[lyric[0]])
    #     print("相似度：",  lyric[1])